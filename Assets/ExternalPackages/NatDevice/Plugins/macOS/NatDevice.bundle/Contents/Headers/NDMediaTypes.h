//
//  NDMediaTypes.h
//  NatDevice
//
//  Created by Yusuf Olokoba on 1/14/2021.
//  Copyright Â© 2022 NatML Inc. All rights reserved.
//

#pragma once

#include "stdint.h"
#include "stdbool.h"

// Platform defines
#ifdef __cplusplus
    #define BRIDGE extern "C"
#else
    #define BRIDGE
#endif

#ifdef _WIN64
    #define EXPORT __declspec(dllexport)
#else
    #define EXPORT
    #define APIENTRY
#endif


#pragma region --Types--
/*!
 @struct NDMediaDevice
 
 @abstract Media device.

 @discussion Media device.
*/
struct NDMediaDevice;
typedef struct NDMediaDevice NDMediaDevice;

/*!
 @struct NDSampleBuffer
 
 @abstract Sample buffer generated by a media device.

 @discussion Sample buffer generated by a media device.
*/
struct NDSampleBuffer;
typedef struct NDSampleBuffer NDSampleBuffer;
#pragma endregion


#pragma region --Enumerations--
/*!
 @enum NDExposureMode

 @abstract Camera device exposure mode.

 @constant ND_EXPOSURE_MODE_CONTINUOUS
 Continuous auto exposure.

 @constant ND_EXPOSURE_MODE_LOCKED
 Locked exposure. Exposure settings will be fixed to their current values.
 Requires `ND_CAMERA_FLAG_LOCKED_EXPOSURE` flag.

 @constant ND_EXPOSURE_MODE_MANUAL
 Manual exposure. User will set exposure duration and sensitivity.
 Requires `ND_CAMERA_FLAG_MANUAL_EXPOSURE` flag.
*/
enum NDExposureMode {
    ND_EXPOSURE_MODE_CONTINUOUS         = 0,
    ND_EXPOSURE_MODE_LOCKED             = 1,
    ND_EXPOSURE_MODE_MANUAL             = 2
};
typedef enum NDExposureMode NDExposureMode;

/*!
 @enum NDFlashMode

 @abstract Camera device photo flash modes.

 @constant ND_FLASH_MODE_OFF
 The flash will never be fired.

 @constant ND_FLASH_MODE_ON
 The flash will always be fired.

 @constant ND_FLASH_MODE_AUTO
 The sensor will determine whether to fire the flash.
*/
enum NDFlashMode {
    ND_FLASH_MODE_OFF       = 0,
    ND_FLASH_MODE_ON        = 1,
    ND_FLASH_MODE_AUTO      = 2
};
typedef enum NDFlashMode NDFlashMode;

/*!
 @enum NDImageFormat

 @abstract Camera image format.

 @constant ND_IMAGE_FORMAT_UNKNOWN
 Unknown or invalid format.

 @constant ND_IMAGE_FORMAT_YCbCr420
 YUV semi-planar format.

 @constant ND_IMAGE_FORMAT_RGBA8888
 RGBA8888 interleaved format.
 */
enum NDImageFormat {
    ND_IMAGE_FORMAT_UNKNOWN     = 0,
    ND_IMAGE_FORMAT_YCbCr420    = 1,
    ND_IMAGE_FORMAT_RGBA8888    = 2,    
};
typedef enum NDImageFormat NDImageFormat;

/*!
 @enum NDMetadataKey

 @abstract Sample buffer metadata key.

 @constant ND_IMAGE_INTRINSIC_MATRIX
 Camera intrinsic matrix. Value array must have enough capacity for 9 float values.

 @constant ND_IMAGE_EXPOSURE_BIAS
 Camera image exposure bias value in EV.

 @constant ND_IMAGE_EXPOSURE_DURATION
 Camera image exposure duration in seconds.

 @constant ND_IMAGE_FOCAL_LENGTH
 Camera image focal length.

 @constant ND_IMAGE_F_NUMBER
 Camera image aperture F-number.

 @constant ND_IMAGE_BRIGHTNESS
 Camera image ambient brightness.
*/
enum NDMetadataKey {
    ND_IMAGE_INTRINSIC_MATRIX   = 1,
    ND_IMAGE_EXPOSURE_BIAS      = 2,
    ND_IMAGE_EXPOSURE_DURATION  = 3,
    ND_IMAGE_FOCAL_LENGTH       = 4,
    ND_IMAGE_F_NUMBER           = 5,
    ND_IMAGE_BRIGHTNESS         = 6,
    ND_IMAGE_ISO                = 7,
};
typedef enum NDMetadataKey NDMetadataKey;

/*!
 @enum NDImageOrientation
 
 @abstract Camera device frame orientation.
 
 @constant ND_ORIENTATION_LANDSCAPE_LEFT
 Landscape left.
 
 @constant ND_ORIENTATION_PORTRAIT
 Portrait.
 
 @constant ND_ORIENTATION_LANDSCAPE_RIGHT
 Landscape right.
 
 @constant ND_ORIENTATION_PORTRAIT_UPSIDE_DOWN
 Portrait upside down.
*/
enum NDImageOrientation { // Matches Unity's `ScreenOrientation` enum
    ND_ORIENTATION_LANDSCAPE_LEFT       = 3,
    ND_ORIENTATION_PORTRAIT             = 1,
    ND_ORIENTATION_LANDSCAPE_RIGHT      = 4,
    ND_ORIENTATION_PORTRAIT_UPSIDE_DOWN = 2
};
typedef enum NDImageOrientation NDImageOrientation;

/*!
 @enum NDDeviceFlags
 
 @abstract Immutable properties of media devices.
 
 @constant ND_DEVICE_FLAG_INTERNAL
 Device is internal.

 @constant ND_DEVICE_FLAG_EXTERNAL
 Device is external.

 @constant ND_DEVICE_FLAG_DEFAULT
 Device is the default device for its media type.

 @constant ND_AUDIO_FLAG_ECHO_CANCELLATION
 Audio device supports echo cancellation.

 @constant ND_CAMERA_FLAG_FRONT_FACING
 Camera device is front-facing.

 @constant ND_CAMERA_FLAG_FLASH
 Camera device supports flash when capturing photos.

 @constant ND_CAMERA_FLAG_TORCH
 Camera device supports torch.

 @constant ND_CAMERA_FLAG_EXPOSURE_POINT
 Camera device supports setting exposure point.

 @constant ND_CAMERA_FLAG_FOCUS_POINT
 Camera device supports setting focus point.

 @constant ND_CAMERA_FLAG_EXPOSURE_LOCK
 Camera device supports locking exposure.

 @constant ND_CAMERA_FLAG_FOCUS_LOCK
 Camera device supports locking focus.

 @constant ND_CAMERA_FLAG_WHITE_BALANCE_LOCK
 Camera device supports locking white balance.
*/
enum NDDeviceFlags {
    // MediaDevice
    ND_DEVICE_FLAG_INTERNAL             = 1 << 0,
    ND_DEVICE_FLAG_EXTERNAL             = 1 << 1,
    ND_DEVICE_FLAG_DEFAULT              = 1 << 3,
    // AudioDevice
    ND_AUDIO_FLAG_ECHO_CANCELLATION     = 1 << 2,
    // CameraDevice
    ND_CAMERA_FLAG_FRONT_FACING         = 1 << 6,
    ND_CAMERA_FLAG_FLASH                = 1 << 7,
    ND_CAMERA_FLAG_TORCH                = 1 << 8,
    ND_CAMERA_FLAG_EXPOSURE_POINT       = 1 << 9,
    ND_CAMERA_FLAG_FOCUS_POINT          = 1 << 10,
    ND_CAMERA_FLAG_LOCKED_EXPOSURE      = 1 << 11,
    ND_CAMERA_FLAG_FOCUS_LOCK           = 1 << 12,
    ND_CAMERA_FLAG_WHITE_BALANCE_LOCK   = 1 << 13,
    ND_CAMERA_FLAG_MANUAL_EXPOSURE      = 1 << 14,
};
typedef enum NDDeviceFlags NDDeviceFlags;
#pragma endregion


#pragma region --Delegates--
/*!
 @abstract Callback invoked with new sample buffer from a media device.
 
 @param context
 User-provided context.
 
 @param sampleBuffer
 Sample buffer.
 */
typedef void (*NDSampleBufferHandler) (void* context, NDSampleBuffer* sampleBuffer);

/*!
 @abstract Callback invoked when a camera device is disconnected.
 
 @param context
 User-provided context.
 */
typedef void (*NDDeviceDisconnectHandler) (void* context);
#pragma endregion
